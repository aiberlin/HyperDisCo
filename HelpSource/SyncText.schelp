TITLE:: SyncText
summary:: sync text across computers
categories:: Undocumented classes
related:: Classes/OSCRouterClient, Guides/OSC_communication
DESCRIPTION::
SyncText keeps a text string synchronized across computers
via the internet using OSCRouterClient.
This is useful for shared coding practice, for learning,
performances, and other uses.

First code examples:

code::
// if needed, close old synctext help docs to avoid confusion
Document.allDocuments.do { |doc|
	if (doc.title.contains("synctext_help")) { doc.close }
};

// make two OSCRouterClients and SyncTexts that share their text content.
// typically these live on two different computers,
// but for testing, this also works on a single computer

// client and synctext 1
~oscli1 = OSCRouterClient(\oscli1, 'syncTextTest', userPassword: \oscli1pw).join;
~tx1 = SyncText('synctext_help', ~oscli1.userName, ~oscli1);

~tx1.currText;
~tx1.showDoc;

// (typically on computer 2:
~oscli2 = OSCRouterClient(\oscli2, 'syncTextTest', userPassword: \oscli2pw).join;
~tx2 = SyncText('synctext_help', ~oscli2.userName, ~oscli2);

~tx2.currText;
~tx2.showDoc;

/// then type something in synxtext_help_oscli1,
// and check that it shows up on synxtext_help_oscli2;
// then check vice versa!


// make a second synctext with two users,
// to check that it works independently of synctext_help:
~tx3 = SyncText('synctext_help2', ~oscli1.userName, ~oscli1).showDoc;
~tx4 = SyncText('synctext_help2', ~oscli2.userName, ~oscli2).showDoc;
// try writing to the four docs: the 2 ..help2 docs should sync,
// and the 2 ..help docs should still sync independently.


// Choose how much debug/sync posting you want:
SyncText.verbosity = 0; // silence
SyncText.verbosity = 1; // normal posting
SyncText.verbosity = 2; // detailed posting for debugging complex setups

// compare contents of ~tx1 and ~tx2 - should be the same:
~tx1.currText.cs;
~tx2.currText.cs;

/// test SyncText access by name:
SyncText.all;
// lookup of instances works both with bare textID and textID_name:
~tx1 === SyncText('synctext_help', 'oscli1')

///// SyncText can be created incomplete without textID and relayAddr,
///// but currently there is no way to update them
SyncText('testNoID');
SyncText('testID', 'user');

::

CLASSMETHODS::

private:: initClass

METHOD:: new
make a new SyncText with
argument:: textID
an ID for the text (same on different computers)
argument:: userID
an ID for the local user (different on each computers)
argument:: relayAddr
An OSCRouterClient or similar to connect the SyncTexts.

METHOD:: all
all known syncTexts

METHOD:: defaultText
the text that a new syncText gets when no text is found online.

INSTANCEMETHODS::


METHOD:: textID
the id  for the synced text

METHOD:: userID
the id  for the local user/computer

METHOD:: relayAddr
the relay to use for sync messages

METHOD:: currText
the current synced text

METHOD:: textDoc
the document that shows and edits currText

METHOD:: showDoc
find or make and show a document for currText

METHOD:: enableSend, disableSend
enable and disable sync-sending on currText
METHOD:: sendEnabled
flag whether currently sync-sending or not

METHOD:: lock, unlock
lock and unlock editing of currText on textDoc
METHOD:: lock
flag whether editing currently locked

METHOD:: sendEnabled
flag whether currently sync-sending or not

subsection::mostly for internal use (and debugging)

private:: init, makeOSCFuncs, makeKeyDownFunc
private:: printOn, storeArgs
private:: keyDownSyncFunc

METHOD:: incomingVersions
different versions of the synced text as last sent from synced users.

METHOD:: lastReceived
the last received version of the synced text

METHOD:: lastSent
the last sent version of the synced text

METHOD:: docLocalID
a local ID merging textID and userID.

METHOD:: requestText
ask other nodes for the current text
usually not needed to do explicitly.

METHOD:: setCurr
set currText by hand.
usually only needed internally.
METHOD:: setDocText
set text in textDoc by hand
usually never needed internally.

METHOD:: sendSyncText
send text to sync to otherName.
usually never needed internally, happens when requested.
argument:: otherName

METHOD:: synced
whether the text is currently synced or not.
this is false when SyncText is made, and true
after synced to incoming text or after timeout.

EXAMPLES::

code::
_some_example_code_
::
